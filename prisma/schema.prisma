datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  type          userType       @default(STUDENT)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Course        Course[]
  Review        Review[]
  SavedCourses  SavedCourses[]
  UserProgress  UserProgress[]
  Subscription  Subscription[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum userType {
  ADMIN
  STUDENT
  TEACHER
}

enum ProgressionStatus {
  COMPLETED
  NOT_COMPLETED
}

model Course {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String?  @db.ObjectId
  title                 String
  image                 String
  price                 Float?
  describtion           String
  category              String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  enrollmentCount       Int      @default(0)
  hoursNumber           Int      @default(0)
  certificateOnComplete Boolean  @default(false)
  hasCoupon             Boolean  @default(false)
  sectionsNumber        Int      @default(1)
  downloableResources   Int      @default(0)

  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Lesson       Lesson[]
  Review       Review[]
  SavedCourses SavedCourses[]
  UserProgress UserProgress[]
  Subscription Subscription[]
}

model Subscription {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  courseId String @db.ObjectId
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lesson {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  videoTitle String
  videoLink  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  duration   Float

  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  UserProgress UserProgress[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String   @db.ObjectId
  userId    String   @db.ObjectId
  username  String
  userImage String
  content   String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])
}

model SavedCourses {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  courseId String @db.ObjectId

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])
}

model UserProgress {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  userId   String            @db.ObjectId
  courseId String            @db.ObjectId
  lessonId String            @db.ObjectId
  status   ProgressionStatus @default(NOT_COMPLETED)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
}
